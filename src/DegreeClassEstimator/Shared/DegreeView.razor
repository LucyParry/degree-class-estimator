@using Microsoft.Extensions.Logging
@using HonoursClassEstimator.Model

@inject ILogger<AddModule> Logger;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;

@if (Degree.AllModules.Any())
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title strong mb-4">Your Degree</h4>

            <table class="table table-striped table-hover table-bordered">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Module</th>
                        <th scope="col">Points</th>
                        <th scope="col">Level</th>
                        <th scope="col">Grade</th>
                        <th scope="col">Weighted</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var module in Degree.AllModules)
                    {
                        <tr>
                            <td>
                                <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-sm btn-primary" title="Remove module">
                                    <i class="bi bi-trash mr-2"></i> Remove
                                </button>
                            </td>
                            <td>
                                <span class="mr-2">@module.Description</span>
                                @if (module.Compulsary)
                                {
                                    <span class="badge bg-primary">Primary</span>
                                }
                            </td>
                            <td>@module.Points</td>
                            <td>@module.Level</td>
                            <td>@module.Grade.GetEnumDescription()</td>
                            <td>
                                @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                                {
                                    if (Degree.CountingModules.Contains(module))
                                    {
                                        <a href="#" data-toggle="tooltip" title=@module.FinalWeightedPointsLongDescription class="result-calculation">
                                            @module.FinalWeightedPointsShortDescription = <span class="bold-message">@module.FinalWeightedPoints</span>
                                        </a>
                                        if (Degree.QualityAssuranceModules.Contains(module))
                                        {
                                            <br />
                                            <span>(QA: @module.GradeWeightedPointsShortDescription)</span>
                                        }
                                    }
                                    else
                                    {
                                        <span>Not required</span>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th>Total</th>
                        <th></th>
                        <th>@Degree.AllModulePoints</th>
                        <th></th>
                        <th>
                            @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                            {
                                var weightedString = $"{Degree.DegreeWeightedPoints} (QA: {Degree.QualityAssuranceWeightedPoints})";
                                @weightedString
                            }
                        </th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>

            <div class="row">
                <div class="col-sm-4">
                    <button type="submit" @onclick="DoClassify" class="btn btn-primary">Estimate</button>
                </div>
                <div class="col-sm-8">
                    @if (Degree.CalculationResult?.Errors.Any() ?? false)
                    {
                        @foreach (string error in Degree.CalculationResult.Errors)
                        {
                            <span class="validation-message">@error</span>

                            <br />
                        }
                        <span class="validation-message">Refer to the instructions for the minimum requirements for calculating your degree class</span>
                    }
                </div>
            </div>

        </div>
    </div>

    <div>
        @*        @if (!string.IsNullOrWhiteSpace(HostName))
            {
            <div class="section-top-padded">
            <p><strong>Link</strong> - Copy to share or return to this degree later</p>
            </div>
            <div>
            <div>
            <div class="row">
            <div class="col-md-11">
            @{
            var saveUrl = $"{HostName}{StateContainer.AppBaseHref}{(Degree.GetModuleCodeString()).Base64Encode(System.Text.Encoding.UTF8)}";
            <input @bind="saveUrl" class="form-control" id="generated-url" placeholder="" type="text" />
            }
            </div>
            <div class="col-md-1">
            <button class="btn btn-info mb-2">
            Copy
            </button>
            </div>
            </div>
            </div>
            </div>
            }*@

        <span id="results-section"></span>
        <div class="section-top-padded">
            @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
            {
                <Result Degree=@Degree></Result>
            }
        </div>
    </div>
}

@code
{
    [Parameter] public Degree Degree { get; set; }
    [Parameter] public Action<Module> OnRemoveModule { get; set; }

    ClassThresholds[]? Thresholds;
    IClassifier? Classifier;

    string? HostName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Thresholds = await Http.GetFromJsonAsync<ClassThresholds[]>("data/thresholds.json");
        Classifier = new StandardClassifier(Thresholds);
    }

    void DoClassify()
    {
        Degree.Classify(Classifier);
        this.StateHasChanged();
    }
}