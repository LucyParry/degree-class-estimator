@using HonoursClassEstimator.Model

<div>
    <div id="result" class="row">

        <div class="col-md-12">
            <div class="card-group">

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Initial classification</h5>
                        <p class="card-text">Your weighted total points is <span class="bold-message">@Degree.DegreeWeightedPoints</span>, giving an initial classification of:</p>
                        <h5 class="bold-message">@Degree.InitialClass.GetEnumDescription()</h5>

                        <div>
                            <button @onclick="ToggleInitialThresholdTable" class="btn btn-info btn-sm">
                                @(initialThresholdsTableVisible ? "Hide thresholds" : "Show thresholds")
                            </button>
                        </div>

                        <div class="threshold-table">
                            @if (initialThresholdsTableVisible)
                            {
                                <table class="table table-sm">
                                    <tr>
                                        <td style="width:50%;">@HonoursClass.First.GetEnumDescription()</td>
                                        <td style="width:50%;">@Degree.InitialClassThresholds.FirstUpperBound or less</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.UpperSecond.GetEnumDescription()</td>
                                        <td>@(Degree.InitialClassThresholds.FirstUpperBound + 1) to @Degree.InitialClassThresholds.UpperSecondUpperBound</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.LowerSecond.GetEnumDescription()</td>
                                        <td>@(Degree.InitialClassThresholds.UpperSecondUpperBound + 1) to @Degree.InitialClassThresholds.LowerSecondUpperBound</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.Third.GetEnumDescription()</td>
                                        <td>@(Degree.InitialClassThresholds.LowerSecondUpperBound + 1) to @Degree.InitialClassThresholds.ThirdUpperBound</td>
                                    </tr>
                                </table>
                            }
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Quality assurance</h5>
                        <p>Your best 60 credits at Level 3 (weighted total <span class="bold-message">@Degree.QualityAssuranceWeightedPoints</span>) indicate a QA class of: </p>
                        <h5 class="bold-message">@Degree.QualityAssuranceClass.GetEnumDescription()</h5>

                        <div>
                            <button @onclick="ToggleQAThresholdTable" class="btn btn-info btn-sm">
                                @(qaThresholdsTableVisible ? "Hide thresholds" : "Show thresholds")
                            </button>
                        </div>

                        <div class="threshold-table">
                            @if (qaThresholdsTableVisible)
                            {
                                <table class="table table-sm">
                                    <tr>
                                        <td style="width:50%;">@HonoursClass.First.GetEnumDescription()</td>
                                        <td style="width:50%;">@Constants.QAClassThresholds.FirstUpperBound or less</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.UpperSecond.GetEnumDescription()</td>
                                        <td>@(Constants.QAClassThresholds.FirstUpperBound + 1) to @Constants.QAClassThresholds.UpperSecondUpperBound</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.LowerSecond.GetEnumDescription()</td>
                                        <td>@(Constants.QAClassThresholds.UpperSecondUpperBound + 1) to @Constants.QAClassThresholds.LowerSecondUpperBound</td>
                                    </tr>
                                    <tr>
                                        <td>@HonoursClass.Third.GetEnumDescription()</td>
                                        <td>@(Constants.QAClassThresholds.LowerSecondUpperBound + 1) to @Constants.QAClassThresholds.ThirdUpperBound</td>
                                    </tr>
                                </table>
                            }
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Final classification</h5>
                        @{
                            string compare = "";
                            if ((int)Degree.InitialClass == (int)Degree.QualityAssuranceClass) { compare = "matches"; }
                            if ((int)Degree.InitialClass < (int)Degree.QualityAssuranceClass) { compare = "exceeds"; }
                            if ((int)Degree.InitialClass > (int)Degree.QualityAssuranceClass) { compare = "is less than"; }

                            <p>The QA class @compare the initial class, giving a final estimate of:</p>
                        }
                        <h5 class="bold-message">@Degree.FinalClass.GetEnumDescription()</h5>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


@code {

    [Parameter] public Degree Degree { get; set; }

    bool initialThresholdsTableVisible { get; set; }

    bool qaThresholdsTableVisible { get; set; }


    protected override void OnInitialized()
    {
        initialThresholdsTableVisible = false;
        qaThresholdsTableVisible = false;
    }

    void ToggleInitialThresholdTable()
    {
        initialThresholdsTableVisible = initialThresholdsTableVisible ? false : true;
    }

    void ToggleQAThresholdTable()
    {
        qaThresholdsTableVisible = qaThresholdsTableVisible ? false : true;
    }
}