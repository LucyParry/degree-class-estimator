@using Microsoft.Extensions.Logging
@using DegreeClassEstimator.Model

@inject IJSRuntime JSRuntime
@inject ILogger<AddModule> Logger;
@inject HttpClient Http;
@inject NavigationManager NavManager

@if (Degree.AllModules.Any())
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title strong mb-4">Your Degree</h4>

            <div class="table-responsive-lg">
                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th scope="col" class="text-center" style="width:6%;"></th>
                            <th scope="col">Module</th>
                            <th scope="col" class="text-center" style="width:10%;">Points</th>
                            <th scope="col" class="text-center" style="width:10%;">Grade</th>
                            <th scope="col" class="text-center" style="width:10%;">Level</th>                            
                            <th scope="col">Weighted</th> 
                            <th scope="col">QA</th> 
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var module in Degree.AllModules)
                        {
                            <tr>
                                <td class="text-center align-middle">
                                    <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-outline-danger btn-sm" title="Remove module">
                                        <i class="bi bi-trash mr-2"></i>
                                    </button>
                                </td>
                                <td class="align-middle">
                                    <span class="mr-2">@module.Description</span>
                                    @if (module.Compulsary)
                                    {
                                        <span class="badge bg-primary">Primary</span>
                                    }
                                </td>
                                <td class="text-center align-middle">@module.Points</td>
                                <td class="text-center align-middle">@module.Grade.GetEnumDescription()</td>
                                <td class="text-center align-middle">@( (int)module.Level )</td>                                
                                <td>
                                    @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                                    {
                                        if (Degree.CountingModules.Contains(module))
                                        {
                                            @module.FinalWeightedPointsShortDescription<span>&nbsp;=&nbsp;</span><span class="strong">@module.FinalWeightedPoints</span>
                                            <br />
                                            <span class="small-text">@module.FinalWeightedPointsLongDescription</span>
                                        }
                                        else
                                        {
                                            <span>Not required</span>
                                        }
                                    }
                                </td>
                                <td>
                                    @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                                    {
                                        if (Degree.QualityAssuranceModules.Contains(module))
                                        {
                                            <br />
                                            <span>@module.GradeWeightedPointsShortDescription</span>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th class="text-center align-middle">Totals</th>
                            <th></th>
                            <th class="text-center align-middle">@Degree.AllModulePoints</th>
                            <th></th>
                            <th></th>
                            <th class="text-center align-middle">
                                @{
                                    var weighted = Degree.IsValid ? Degree.DegreeWeightedPoints.ToString() : "";
                                    @weighted
                                }
                            </th>
                            <th class="text-center align-middle">
                                @{
                                    var weightedQA = Degree.IsValid ? Degree.QualityAssuranceWeightedPoints.ToString() : "";
                                    @weightedQA
                                }
                            </th>
                        </tr>
                    </tfoot>
                </table>

            </div>

            <div class="row">
                <div class="col-sm-4">
                    <button type="submit" @onclick="DoClassify" class="btn btn-theme">Estimate</button>
                </div>
                <div class="col-sm-8">
                    @if (Degree.CalculationResult?.Errors.Any() ?? false)
                    {
                        @foreach (string error in Degree.CalculationResult.Errors)
                        {
                            <span class="validation-message">@error</span>
                            <br />
                        }
                        <span class="validation-message">Refer to the instructions for the minimum requirements for calculating your degree class</span>
                    }
                </div>
            </div>

        </div>
    </div>

    <div>
        @if (Degree.IsValid)
        {
            @if (!string.IsNullOrWhiteSpace(SaveUri))
            {
                <div class="row mt-3">
                    <label for=@SaveUri>Link - Share or return to this degree later</label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="SaveUri" aria-label="URI" aria-describedby="button-copy-uri" />
                        <button class="btn btn-outline-secondary" id="button-copy-uri" type="button" @onclick="DoClipboardCopy"><i class="bi bi-clipboard-plus mr-2" id="clipboard-copy-icon"></i></button>
                    </div>
                </div>
            }
            <div class="mt-2">
                <Result Degree=@Degree></Result>
            </div>
        }
    </div>
}

@code
{
    [Parameter] public Degree? Degree { get; set; }
    [Parameter] public Action<Module> OnRemoveModule { get; set; }

    ClassThresholds[]? Thresholds;
    IClassifier? Classifier;

    string? SaveUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Thresholds = await Http.GetFromJsonAsync<ClassThresholds[]>("data/thresholds.json");
        Classifier = new StandardClassifier(Thresholds);
    }

    void DoClassify()
    {
        Degree.Classify(Classifier);
        this.SaveUri = Degree.IsValid ? $"{NavManager.Uri}{(Degree.GetModuleCodeString()).Base64Encode(System.Text.Encoding.UTF8)}" : "";
        this.StateHasChanged();
    }

    async void DoClipboardCopy()
    {
        await JSRuntime.InvokeVoidAsync("jsInteropFunctions.clipboardCopy", SaveUri);
    }
}