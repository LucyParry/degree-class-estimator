@using Microsoft.Extensions.Logging
@using DegreeClassEstimator.Model
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject ILogger<AddModule> Logger;
@inject HttpClient Http;
@inject NavigationManager NavManager

@if (Degree.AllModules.Any())
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title strong mb-4">Your Degree</h4>

            <p>@checkedMessage</p>

            <div>
                <div class="row d-none d-sm-none d-md-flex mb-2">
                    <div class="col-md-1"></div>
                    <div class="col-md-2 strong">Code</div>
                    <div class="col-md-2 strong">Credits</div>
                    <div class="col-md-2 strong">Grade</div>
                    <div class="col-md-2 strong">Level</div>
                    <div class="col-md-3"></div>
                </div>

                @foreach (var module in Degree.AllModules)
                {
                    EditContext context = new EditContext(module);
                    context.OnFieldChanged += OnFormUpdated;

                    <EditForm EditContext="@context">
                        <DataAnnotationsValidator />
                        <div class="row g-3">
                            <div class="col-md-1">
                                <div class="row">
                                    <div class="col-sm-3 col-md-6">
                                        <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-outline-danger btn-sm" title="Remove module">
                                            <i class="bi bi-trash mr-2"></i>
                                        </button>
                                    </div>
                                    <div class="col-sm-3 col-md-6">                                       
                                        <span class=""><InputCheckbox @bind-Value="module.Compulsory" class="form-check-input mr-2" title="Compulsory"></InputCheckbox></span>
                                        <label for="@module.Compulsory" class="col-form-label d-flex d-md-none">Compulsory</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <InputText class="form-control" @bind-Value="module.Code" />
                            </div>
                            <div class="col-md-2">
                                <InputNumber class="form-control" @bind-Value="module.Credits" />
                                <ValidationMessage For="@(() => module.Credits)" />
                            </div>
                            <div class="col-md-2">
                                <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Grade"></Web.Components.InputSelectEnum>
                            </div>
                            <div class="col-md-2">
                                <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Level"></Web.Components.InputSelectEnum>
                            </div>
                            <div class="col-md-3">
                                @if(@module.Compulsory)
                                {
                                    <span class="small-text">Compulsory</span>
                                    <br />
                                }

                                @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                                {
                                    if (Degree.CountingModules.Contains(module))
                                    {
                                        @module.FinalWeightedCreditsShortDescription
                                        if (Degree.QualityAssuranceModules.Contains(module))
                                        {
                                            <span> (QA: @module.GradeWeightedCreditsShortDescription)</span>
                                        }
                                        <br />
                                        <span class="small-text">@module.FinalWeightedCreditsLongDescription</span>
                                    }
                                    else
                                    {
                                        <span>Not required</span>
                                    }
                                }
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                }

                <div class="row d-none d-sm-none d-md-flex mb-2">
                    <div class="col-md-1 strong">Totals:</div>
                    <div class="col-md-2"></div>
                    <div class="col-md-2 strong">@Degree.AllModuleCredits</div>
                    <div class="col-md-2"></div>
                    <div class="col-md-2"></div>
                    <div class="col-md-3 strong">
                        @{
                            if(Degree.IsValid)
                            {
                                string totalString = $"{Degree.DegreeWeightedCredits} (QA:{@Degree.QualityAssuranceWeightedCredits})";
                                @totalString;
                            }                        
                        }
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-4 mt-2">
                    <button type="submit" @onclick="DoClassify" class="btn btn-theme">Estimate</button>
                </div>
                <div class="col-sm-8">
                    @if (Degree.CalculationResult?.Errors.Any() ?? false)
                    {
                        @foreach (string error in Degree.CalculationResult.Errors)
                        {
                            <span class="validation-message">@error</span>
                            <br />
                        }
                        <span class="validation-message">Refer to the instructions for the minimum requirements for calculating your degree class</span>
                    }
                </div>
            </div>

        </div>
    </div>

    <div id="results-section">
        @if (Degree.IsValid)
        {
            @if (!string.IsNullOrWhiteSpace(SaveUri))
            {
                <div class="row mt-3">
                    <label for=@SaveUri><span class="strong">Link - Share or return to this degree later</span></label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="SaveUri" aria-label="URI" aria-describedby="button-copy-uri" />
                        <button class="btn btn-outline-secondary" id="button-copy-uri" type="button" @onclick="DoClipboardCopy"><i class="bi bi-clipboard-plus mr-2" id="clipboard-copy-icon"></i></button>
                    </div>
                </div>
            }
            <div class="mt-2">
                <Result Degree=@Degree></Result>
            </div>
        }
    </div>
}

@code
{
    [Parameter] public Degree Degree { get; set; }
    [Parameter] public Action<Module> OnRemoveModule { get; set; }

    ClassThresholds[]? Thresholds;
    IClassifier? Classifier;

    string? checkedMessage;

    string? SaveUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Thresholds = await Http.GetFromJsonAsync<ClassThresholds[]>("data/thresholds.json");
        Classifier = new StandardClassifier(Thresholds);
    }

    private void OnFormUpdated(Object sender, FieldChangedEventArgs args)
    {
        checkedMessage = $"Last changed at {DateTime.Now}";
        DoClassify();
    }

    async void DoClassify()
    {
        Degree.Classify(Classifier);
        this.SaveUri = Degree.IsValid ? $"{NavManager.Uri}{(Degree.GetModuleCodeString()).Base64Encode(System.Text.Encoding.UTF8)}" : "";
        this.StateHasChanged();

        await JSRuntime.InvokeVoidAsync("jsInteropFunctions.sectionJump", "results-section");
    }

    async void DoClipboardCopy()
    {
        await JSRuntime.InvokeVoidAsync("jsInteropFunctions.clipboardCopy", SaveUri);
    }
}