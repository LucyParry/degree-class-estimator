@using Microsoft.Extensions.Logging
@using DegreeClassEstimator.Model
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject ILogger<AddModule> Logger;
@inject HttpClient Http;
@inject NavigationManager NavManager

@if (Degree.AllModules.Any())
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title strong mb-4">Your Degree</h4>
            <div class="table table-responsive-lg">

                <div class="row">
                    <div class="col-sm-2"></div>
                    <div class="col-sm-2">Code</div>
                    <div class="col-sm-2">Credits</div>
                    <div class="col-sm-2">Grade</div>
                    <div class="col-sm-2">Level</div>
                    <div class="col-sm-2">Result</div>
                </div>

                @foreach (var module in Degree.AllModules)
                {
                    <EditForm Model=@module>
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-1">
                                <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-outline-danger btn-sm" title="Remove module">
                                    <i class="bi bi-trash mr-2"></i>
                                </button>
                            </div>
                            <div class="col-md-1">
                                <InputCheckbox @bind-Value="module.Compulsory" class="form-check-input"></InputCheckbox>
                            </div>
                            <div class="col-md-2">
                                <InputText class="form-control" @bind-Value="module.Code" />
                            </div>
                            <div class="col-md-2">
                                <InputNumber class="form-control" @bind-Value="module.Credits" />
                                <ValidationMessage For="@(() => module.Credits)" />
                            </div>
                            <div class="col-md-2">
                                <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Grade"></Web.Components.InputSelectEnum>
                            </div>
                            <div class="col-md-2">
                                <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Level"></Web.Components.InputSelectEnum>
                            </div>
                            <div class="col-md-2">
                            @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                            {
                                if (Degree.CountingModules.Contains(module))
                                {
                                    @module.FinalWeightedCreditsShortDescription
                                    <br />
                                    <span class="small-text">@module.FinalWeightedCreditsLongDescription</span>
                                }
                                else
                                {
                                    <span>Not required</span>
                                }
                            }

                            @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                            {
                                if (Degree.QualityAssuranceModules.Contains(module))
                                {
                                    <br />
                                    <span> QA: @module.GradeWeightedCreditsShortDescription</span>
                                }
                            }
                        




                            </div>
                        </div>
                    </EditForm>

                    @*                                <td class="text-center align-middle">
                        <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-outline-danger btn-sm" title="Remove module">
                        <i class="bi bi-trash mr-2"></i>
                        </button>
                        </td>
                        <td></td>
                        <td class="align-middle">
                        <span class="mr-2"></span>
                        <input type="text" class="form-control" @bind="@module.Code" />
                        </td>
                        <td class="text-center align-middle">

                        <!--TODO - Get min and max from model-->
                        <input type="number" class="form-control" @bind="@module.Credits" min="1" max="120" />
                        </td>
                        <td class="text-center align-middle">@module.Grade.GetEnumDescription()</td>
                        <td class="text-center align-middle">@( (int)module.Level )</td>
                        <td>
                        @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                        {
                        if (Degree.CountingModules.Contains(module))
                        {
                        @module.FinalWeightedCreditsShortDescription

                        <span>&nbsp;=&nbsp;</span>

                        <span class="strong">@module.FinalWeightedCredits</span>
                        <br />
                        <span class="small-text">@module.FinalWeightedCreditsLongDescription</span>
                        }
                        else
                        {
                        <span>Not required</span>
                        }
                        }
                        </td>
                        <td>
                        @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                        {
                        if (Degree.QualityAssuranceModules.Contains(module))
                        {
                        <br />
                        <span>@module.GradeWeightedCreditsShortDescription</span>
                        }
                        }
                        </td>*@


                    <hr/>
                }

                <div class="tfoot">
                </div>



                @*                <table class="table table-striped table-hover table-bordered">
                    <thead>
                    <tr>
                    <th scope="col" class="text-center" style="width:6%;"></th>
                    <th scope="col" style="width:5%;">Required</th>
                    <th scope="col" style="width:15%;">Module</th>
                    <th scope="col" class="text-center" style="width:10%;">Credits</th>
                    <th scope="col" class="text-center" style="width:10%;">Grade</th>
                    <th scope="col" class="text-center" style="width:10%;">Level</th>
                    <th scope="col">Weighted</th>
                    <th scope="col">QA</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var module in Degree.AllModules)
                    {
                    <tr>
                    <td colspan="8">
                    <EditForm Model=@module>
                    <table class="table mb-0">
                    <tr>
                    <td class="text-center align-middle">
                    <button @onclick="(() => OnRemoveModule(module))" type="submit" class="btn btn-outline-danger btn-sm" title="Remove module">
                    <i class="bi bi-trash mr-2"></i>
                    </button>
                    </td>
                    <td><input type="checkbox" @bind="@module.Compulsory" /></td>
                    <td class="align-middle">
                    <input type="text" class="form-control" @bind="@module.Code" />
                    </td>
                    <td class="text-center align-middle">

                    @{
                    var attrib = module.GetAttribute<Module, RangeAttribute>(nameof(Module.Credits));
                    }
                    <input type="number" class="form-control" @bind="@module.Credits"
                    min="@(attrib is null ? string.Empty : attrib.Minimum)"
                    max="@(attrib is null ? string.Empty : attrib.Maximum)" />
                    </td>
                    <td class="text-center align-middle">
                    <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Grade"></Web.Components.InputSelectEnum>
                    </td>
                    <td class="text-center align-middle">
                    <Web.Components.InputSelectEnum class="form-select" @bind-Value="module.Level"></Web.Components.InputSelectEnum>
                    </td>
                    <td>
                    @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                    {
                    if (Degree.CountingModules.Contains(module))
                    {
                    @module.FinalWeightedCreditsShortDescription

                    <span>&nbsp;=&nbsp;</span>

                    <span class="strong">@module.FinalWeightedCredits</span>
                    <br />
                    <span class="small-text">@module.FinalWeightedCreditsLongDescription</span>
                    }
                    else
                    {
                    <span>Not required</span>
                    }
                    }
                    </td>
                    <td>
                    @if (!Degree.CalculationResult.Errors.Any() && Degree.IsCalculated)
                    {
                    if (Degree.QualityAssuranceModules.Contains(module))
                    {
                    <br />
                    <span>@module.GradeWeightedCreditsShortDescription</span>
                    }
                    }
                    </td>
                    </tr>
                    </table>
                    </EditForm>
                    </td>
                    </tr>
                    }

                    </tbody>
                    <tfoot>
                    <tr>
                    <th class="text-center align-middle">Totals</th>
                    <th></th>
                    <th class="text-center align-middle">@Degree.AllModuleCredits</th>
                    <th></th>
                    <th></th>
                    <th class="text-center align-middle">
                    @{
                    var weighted = Degree.IsValid ? Degree.DegreeWeightedCredits.ToString() : "";
                    @weighted
                    }
                    </th>
                    <th class="text-center align-middle">
                    @{
                    var weightedQA = Degree.IsValid ? Degree.QualityAssuranceWeightedCredits.ToString() : "";
                    @weightedQA
                    }
                    </th>
                    </tr>
                    </tfoot>
                    </table>*@

















            </div>

            <div class="row">
                <div class="col-sm-4 mt-2">
                    <button type="submit" @onclick="DoClassify" class="btn btn-theme">Estimate</button>
                </div>
                <div class="col-sm-8">
                    @if (Degree.CalculationResult?.Errors.Any() ?? false)
                    {
                        @foreach (string error in Degree.CalculationResult.Errors)
                        {
                            <span class="validation-message">@error</span>
                            <br />
                        }
                        <span class="validation-message">Refer to the instructions for the minimum requirements for calculating your degree class</span>
                    }
                </div>
            </div>

        </div>
    </div>

    <div id="results-section">
        @if (Degree.IsValid)
        {
            @if (!string.IsNullOrWhiteSpace(SaveUri))
            {
                <div class="row mt-3">
                    <label for=@SaveUri><span class="strong">Link - Share or return to this degree later</span></label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="SaveUri" aria-label="URI" aria-describedby="button-copy-uri" />
                        <button class="btn btn-outline-secondary" id="button-copy-uri" type="button" @onclick="DoClipboardCopy"><i class="bi bi-clipboard-plus mr-2" id="clipboard-copy-icon"></i></button>
                    </div>
                </div>
            }
            <div class="mt-2">
                <Result Degree=@Degree></Result>
            </div>
        }
    </div>
}

@code
{
    [Parameter] public Degree? Degree { get; set; }
    [Parameter] public Action<Module> OnRemoveModule { get; set; }

    private EditContext? editContext;

    ClassThresholds[]? Thresholds;
    IClassifier? Classifier;

    string? SaveUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Thresholds = await Http.GetFromJsonAsync<ClassThresholds[]>("data/thresholds.json");
        Classifier = new StandardClassifier(Thresholds);
    }

    async void DoClassify()
    {
        Degree.Classify(Classifier);
        this.SaveUri = Degree.IsValid ? $"{NavManager.Uri}{(Degree.GetModuleCodeString()).Base64Encode(System.Text.Encoding.UTF8)}" : "";
        this.StateHasChanged();

        await JSRuntime.InvokeVoidAsync("jsInteropFunctions.sectionJump", "results-section");
    }

    async void DoClipboardCopy()
    {
        await JSRuntime.InvokeVoidAsync("jsInteropFunctions.clipboardCopy", SaveUri);
    }
}